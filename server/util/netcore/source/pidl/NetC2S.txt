//protocol.txt
/*
	상수형은 모두 지원가능
	상수형을 typedef 선언한 경우 PacketGenerator 모듈의 ArrayType[] 에 등록하면 상수로 초기화할 수 있습니다.
	문자형은 char/CHAR, wchar_t/WCHAR, std::string, std::wstring 을 지원합니다.
	구조체및 고정배열을 지원을 위해 CMsg을 구현하였습니다.
	주석은 한줄을 할애하세요. 코드 뒤의 주석은 인지하지 못합니다.

	//c# 코드에 추가
	rename cs(std::string, System.String);	: c# 코드에 std::string을 System.String으로 대체합니다.
	using System.XXX;						: c# 코드에 using System.XXX가 추가됩니다.
	//c++ 코드에 추가(추후예정)
	include "abc.h";						: c++코드에 #include "abc.h" 추가됩니다. ( <>도 지원 )
	
	array(char name[100]) 지원합니다.
	vector 지원합니다.
	list는 아직 지원하지 않습니다. 추후 예정입니다.

	[id=0xA0] : 프로토콜의 번호를 부여할 수 있습니다(global 값에 합산(+))
				, 이후의 프로토콜은 부여된 번호와 연속성을 갖습니다
	[udp] : core에서 지원되는 udp
	[unreliable] : 패킷의 도착을 보장하지 않는다.(default:reliable)
	[encrypt] : 암호화 설정
	
	PT_VERSION : 프로토콜 버전( type:PROTOCOL_T )

	p.s.
		후미 첨자 : REQ-요청패킷, ACK-응답패킷(one target), NTF-요청없이 전달패킷(Notify)
		[id=0x1234,udp,unreliable,encrypt] 순서 준수할 것

	//프로젝트에 추가설정
	1. pidl에 등록된 "NetC2S.txt"의 속성 ->Configuration Properties->General->Item Type을 "Custom Build Tool"로 변경
	2. Custom Build Tool->Command Line에 ["../PacketGenerator.exe" "%(FullPath)" -path "../pidl"] 추가 ([ ]는 제외)
	3. Custom Build Tool->Outputs에 [%(Filename)_Structure.h;%(Filename)_Protocol.h;%(Filename)_RecvPacket.h;%(Filename)_SendPacket.h;] 추가 ([ ]는 제외)
*/

using System;
using System.Collections.Generic;

rename cs(HOSTID, UInt64);
rename cs(PROTOCOL_T, UInt32);
rename cs(REMOTE_ENTRY_T, byte);
rename cs(ADDR_IP, UInt32);
rename cs(ADDR_PORT, UInt16);
rename cs(RESULT_T, UInt16);
rename cs(S_STATUS_T, byte)
rename cs(TIME_T, UInt64);
rename cs(P2PGROUPID, UInt64);
rename cs(std::vector<NetCore::stRemoteEndpoint>, List<FreeNet.stRemoteEndpoint>);
rename cs(std::vector<NetCore::stRemote>, List<FreeNet.stRemote>)

PT_VERSION = 20210311

global NetC2S 0xFE00
{
	//서버 접속이 완료됨
	//	remote : 서버에서 할당받은 자신의 host id
	//	winUsers : 사용자 환전가능금액
	//	checking : enum CHECK_SERVER ( not using )
	//	serviceinfo : 등록된 서비스 정보
	[encrypt] CORE_CONNECT_COMPLETED_NTF(HOSTID remote)

	//서버 접속시 등록된 정보를 요청한다.
	//	ver : protocol 버전
	//	entry : client의 타입( user client, login, game, master, etc)
	//	serverTcpPort : 서버에 접속한 자신도 서버의 기능을 할때 port
	//[encrypt] CORE_SIGN_UP_REQ(PROTOCOL_T version, REMOTE_ENTRY_T entry, ADDR_PORT serverTcpPort, std::vector<NetCore::stRemoteEndpoint> peerinfo)
	[encrypt] CORE_SIGN_UP_REQ(PROTOCOL_T version, REMOTE_ENTRY_T entry, ADDR_PORT serverTcpPort)

	//서버 접속시 등록된 정보를 받는다.
	//	result : 결과
	//	servertime : 서버의 현재시간
	//	udpport : 서버의 udp port
	//[encrypt] CORE_SIGN_UP_ACK(RESULT_T result, TIME_T servertime, ADDR_PORT udpport, std::vector<NetCore::stRemoteEndpoint> peerinfo)
	[encrypt] CORE_SIGN_UP_ACK(RESULT_T result, TIME_T servertime, ADDR_PORT udpport)

	//이 protocol은 UDP 패킷 최상에 위치해 주세요.(인식문제)
	//서버 중재를 통한 peer 간의 데이타 전송
	//	remoteTo : 서버에서 할당받은 타인의 host id
	//	context : reliable / unreliable
	//	msg : 전달받아야 하는 데이타를 담는 컨테이너
	//[encrypt] CORE_UDP_RELAY_SERVER_TO_PEER_NTF(HOSTID remoteTo, PACKET_CONTEXT context, CMsg msg)


	//서버가 각 Client에게 ping을 체크한다.
	//	servertime : 서버의 현재시간
	[encrypt] CORE_HEART_BEAT_REQ(TIME_T servertime)

	//서버로 부터 받은 패킷을 client는 그대로 돌려준다.
	//	servertime : 패킷을 보낼때의 서버의 시간
	[encrypt] CORE_HEART_BEAT_ACK(TIME_T servertime)


	//group members info
	//	group : join한 group의 id
	//	peerinfo : group 맴버의 정보(아래 참조)
	//		remote : group 맴버의 서버에서 할당받은 자신의 host id
	//		publicIP : group 맴버의 public ip
	//		publicPort : group 맴버의 public port
	//		privateIP : group 맴버의 private ip
	//		privatePort : group 맴버의 private port
	[encrypt] CORE_JOIN_GROUP_NTF(P2PGROUPID group, std::vector<NetCore::stRemoteEndpoint> peerinfo)

	//group에 자신의 info를 전송
	//	group : join한 group의 id
	//	peerinfo : group 맴버의 정보(아래 참조)
	//		remote : group 맴버의 서버에서 할당받은 자신의 host id
	//		publicIP : group 맴버의 public ip
	//		publicPort : group 맴버의 public port
	//		privateIP : group 맴버의 private ip
	//		privatePort : group 맴버의 private port
	[encrypt] CORE_ENTER_GROUP_NTF(P2PGROUPID group, std::vector<NetCore::stRemoteEndpoint> peerinfo)

	//leave group 주변에 통보
	//	group : join한 group의 id
	//	remote : 서버에서 할당받은 자신의 host id
	[encrypt] CORE_LEAVE_GROUP_NTF(P2PGROUPID group, HOSTID remote)




	//서버 hole punching
	//	remote : 서버에서 할당받은 자신의 host id
	//	privateIP : client에서 확인한 자신의 ip
	//	privatePort : client에서 확인한 자신의 port
	//	serverTcpPort : client가 서버의 역할을 할 경우 tcp port(not using)
	//	serverUdpPort : client가 서버의 역할을 할 경우 udp port(not using)
	//[udp,encrypt] CORE_UDP_HOLE_PUNCHING_SERVER_REQ(HOSTID remote, ADDR_IP privateIP, ADDR_PORT privatePort, ADDR_PORT serverTcpPort, ADDR_PORT serverUdpPort)
	[udp,encrypt] CORE_UDP_HOLE_PUNCHING_SERVER_REQ(HOSTID remote, ADDR_IP privateIP, ADDR_PORT privatePort)

	//서버 hole punching 결과
	[udp,encrypt] CORE_UDP_HOLE_PUNCHING_SERVER_ACK()
	
	//상대 peer 에게 홀펀칭받은 준비가 되었다고 서버로틀 통해 전달한다.
	//	remoteTos : 상대(받을) peer
	[udp,encrypt] CORE_HOLE_PUNCHING_PEER_READY_REQ(std::vector<NetCore::stRemote> remoteTos)

	//상대 peer 로 부터 홀펀칭받은 준비가 되었다고 서버로틀 통해 전달받는다.
	//	remoteFrom : 상대(보낸) peer
	[udp,encrypt] CORE_HOLE_PUNCHING_PEER_READY_NTF(HOSTID remoteFrom)

	//peer 간의 hole punching 결과를 서버에 알린다.
	//	result : 결과
	//	remoteFrom : 홀펀칭을 시도하는 host(서버에서 할당받은 자신의 host id)
	//	remoteTo : 서버에서 할당받은 타인의 host id
	[encrypt] CORE_HOLE_PUNCHING_PEER_RESULT_NTF(RESULT_T result, HOSTID remoteFrom, HOSTID remoteTo)



};
