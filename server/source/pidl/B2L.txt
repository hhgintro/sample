//protocol.txt
/*
	상수형은 모두 지원가능
	상수형을 typedef 선언한 경우 PacketGenerator 모듈의 ArrayType[] 에 등록하면 상수로 초기화할 수 있습니다.
	문자형은 CHAR, WCHAR, std::string, std::wstring 을 지원합니다.
	구조체및 고정배열을 지원을 위해 CMsg을 구현하였습니다.
	주석은 한줄을 할애하세요. 코드 뒤의 주석은 인지하지 못합니다.
	
	vector 지원합니다.
	list는 아직 지원하지 않습니다. 추후 예정입니다.
	
	[encrypt] : 암호화 설정
	
	p.s.
		후미 첨자 : REQ-요청패킷, ACK-응답패킷(one target), NTF-요청없이 전달패킷(Notify)
*/


global B2L 0x2000
{
	//로그인 요청
	//	account : 계정명
	//	authkey : 인증키(password)
	//	remoteBalance : Balance서버의 host id - 응답을 받을때 바로 처리하기 위해
	//	remoteX : 접속 유저의 host id
	[encrypt] AC_LOGIN_REQ(std::string account, std::string authkey, HOSTID remoteBalance, HOSTID remoteX)

	//로그인 요청에 대한 응답
	//	result : 응답 결과값
	//	result_noti : 부가 정보
	//	remoteX : 접속 유저의 host id
	//	accountpk : 계정 고유 인덱스 PK
	//	account : 계정명
	//	masterkey : master서버 접속 인증키 ( game서버를 통해 접속할 때 검토한다.)
	//	gameserverno : 접속할 gameserver no( 0 이면 제한없이 접속가능 )
	[encrypt] AC_LOGIN_ACK(RESULT_T result, RESULT_T result_noti, HOSTID remoteX, ACCOUNTPK accountpk, std::string account, std::string masterkey, INT16 gameserverno)



	//이 패킷을 join group을 위한 패킷이 아니라.
	//이 패킷을 보냄으로 해서 join이 되는 결과를 낳게 된다.
	//가령, Group이 형성된 작은 채널에 접속한 경우에 CH_JOIN_GROUP_REQ 명칭을 CH_ENTER_CHANNEL_REQ 등과 같이 바꿔사용하기 바란다.
	//join group 요청
	//	remote : 서버에서 할당받은 자신의 host id
	//[encrypt] CH_JOIN_GROUP_REQ(HOSTID remote)

	//이 패킷을 leave group을 위한 패킷이 아니라.
	//이 패킷을 보냄으로 해서 leave가 되는 결과를 낳게 된다.
	//가령, Group이 형성된 작은 채널에서 퇴장한 경우에 CH_LEAVE_GROUP_REQ 명칭을 CH_LEAVE_CHANNEL_REQ 등과 같이 바꿔사용하기 바란다.
	//leave group 요청
	//	group : join한 group의 id
	//	remote : 서버에서 할당받은 자신의 host id
	//[encrypt] CH_LEAVE_GROUP_REQ(P2PGROUPID group, HOSTID remote)







	//peer 간의 데이타 전송
	//	remoteFrom : 서버에서 할당받은 자신의 host id
	//	remoteTo : 서버에서 할당받은 타인의 host id
	//[encrypt] CH_UDP_HELLO_PEER_REQ(HOSTID remoteFrom, HOSTID remoteTo)

	//peer 간의 데이타 전송
	//	remoteFrom : 서버에서 할당받은 자신의 host id
	//	remoteTo : 서버에서 할당받은 타인의 host id
	//[encrypt] CH_UDP_FINE_THANKS_PEER_ACK(HOSTID remoteFrom, HOSTID remoteTo)

};
